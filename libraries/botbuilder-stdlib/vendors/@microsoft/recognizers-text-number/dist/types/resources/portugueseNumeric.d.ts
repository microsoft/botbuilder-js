export declare namespace PortugueseNumeric {
    const LangMarker = "Por";
    const CompoundNumberLanguage = false;
    const MultiDecimalSeparatorCulture = false;
    const HundredsNumberIntegerRegex = "(quatrocent[ao]s|trezent[ao]s|seiscent[ao]s|setecent[ao]s|oitocent[ao]s|novecent[ao]s|duzent[ao]s|quinhent[ao]s|cem|(?<!por\\s+)(cento))";
    const RoundNumberIntegerRegex = "(mil(h([\u00E3a]o|[\u00F5o]es))?|bilh([\u00E3a]o|[\u00F5o]es)|trilh([\u00E3a]o|[\u00F5o]es)|qua[td]rilh([\u00E3a]o|[\u00F5o]es)|quintilh([\u00E3a]o|[\u00F5o]es))";
    const ZeroToNineIntegerRegex = "(quatro|cinco|sete|nove|zero|tr[\u00EAe]s|seis|oito|d(oi|ua)s|h?uma?)";
    const TwoToNineIntegerRegex = "(quatro|cinco|sete|nove|tr[\u00EAe]s|seis|oito|d(oi|ua)s)";
    const TenToNineteenIntegerRegex = "(dez[ea]sseis|dez[ea]ssete|dez[ea]nove|dezoito|(c|qua)torze|quinze|treze|d[\u00E9e]z|onze|doze)";
    const TensNumberIntegerRegex = "(cinquenta|quarenta|trinta|sessenta|setenta|oitenta|noventa|vinte)";
    const DigitsNumberRegex = "\\d|\\d{1,3}(\\.\\d{3})";
    const BelowHundredsRegex: string;
    const BelowThousandsRegex: string;
    const SupportThousandsRegex: string;
    const NegativeNumberTermsRegex = "^[.]";
    const NegativeNumberSignRegex: string;
    const SeparaIntRegex: string;
    const AllIntRegex: string;
    const AllPointRegex: string;
    const SpecialFractionInteger: string;
    const PlaceHolderDefault = "\\D|\\b";
    const PlaceHolderPureNumber = "\\b";
    const AllIntRegexWithLocks: string;
    const AllIntRegexWithDozenSuffixLocks: string;
    const NumbersWithPlaceHolder: (placeholder: string) => string;
    const NumbersWithSuffix: string;
    const RoundNumberIntegerRegexWithLocks: string;
    const NumbersWithDozenSuffix = "(((?<!\\d+\\s*)-\\s*)|(?<=\\b))\\d+\\s+dezena(s)?(?=\\b)";
    const NumbersWithDozen2Suffix = "(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+\\s+d[\u00FAu]zia(s)(?=\\b)";
    const SimpleRoundOrdinalRegex = "(mil[e\u00E9]sim[oa]|milion[e\u00E9]sim[oa]|bilion[e\u00E9]sim[oa]|trilion[e\u00E9]sim[oa]|quatrilion[e\u00E9]sim[oa]|quintilion[e\u00E9]sim[oa])";
    const OneToNineOrdinalRegex = "(primeir[oa]|segund[oa]|terceir[oa]|ter\u00E7[oa]|quart[oa]|quint[oa]|sext[oa]|s[e\u00E9]tim[oa]|oitav[oa]|non[oa])";
    const TensOrdinalRegex = "(nonag[e\u00E9]sim[oa]|octog[e\u00E9]sim[oa]|setuag[e\u00E9]sim[oa]|septuag[e\u00E9]sim[oa]|sexag[e\u00E9]sim[oa]|quinquag[e\u00E9]sim[oa]|quadrag[e\u00E9]sim[oa]|trig[e\u00E9]sim[oa]|vig[e\u00E9]sim[oa]|d[e\u00E9]cim[oa])";
    const HundredOrdinalRegex = "(cent[e\u00E9]sim[oa]|ducent[e\u00E9]sim[oa]|tricent[e\u00E9]sim[oa]|cuadringent[e\u00E9]sim[oa]|quingent[e\u00E9]sim[oa]|sexcent[e\u00E9]sim[oa]|septingent[e\u00E9]sim[oa]|octingent[e\u00E9]sim[oa]|noningent[e\u00E9]sim[oa])";
    const SpecialUnderHundredOrdinalRegex = "(und[e\u00E9]cim[oa]|duod[e\u00E9]cimo)";
    const UnderHundredOrdinalRegex: string;
    const UnderThousandOrdinalRegex: string;
    const OverThousandOrdinalRegex: string;
    const RelativeOrdinalRegex = "(?<relativeOrdinal>pr[o\u00F3]xim[ao]s?|[u\u00FA]ltim[ao]\\s+mas\\s+um|anterior\\s+ao\\s+\u00FAltim[ao]|(pen)?[u\u00FA]ltim[ao]s?|antepen[u\u00FA]ltim[ao]s?|seguintes?|anterior(es)?|atua(l|is))";
    const ComplexOrdinalRegex: string;
    const SuffixRoundOrdinalRegex: string;
    const ComplexRoundOrdinalRegex: string;
    const AllOrdinalNumberRegex: string;
    const AllOrdinalRegex: string;
    const OrdinalSuffixRegex = "(?<=\\b)(\\d*((1|2|3|4|5|6|7|8|9|0)[oa\u00BA\u00AA]|(1|2|3|4|5|6|7|8|9)(\\.[\u00BA\u00AA])))(?=\\b)";
    const OrdinalEnglishRegex: string;
    const FractionNotationRegex: string;
    const FractionNotationWithSpacesRegex = "(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+\\s+\\d+[/]\\d+(?=(\\b[^/]|$))";
    const FractionMultiplierRegex: string;
    const RoundMultiplierWithFraction: string;
    const RoundMultiplierRegex: string;
    const FractionNounRegex: string;
    const FractionNounWithArticleRegex: string;
    const FractionPrepositionRegex: string;
    const AllFloatRegex: string;
    const DoubleWithMultiplierRegex: string;
    const DoubleExponentialNotationRegex = "(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+,)))(\\d+(,\\d+)?)e([+-]*[1-9]\\d*)(?=\\b)";
    const DoubleCaretExponentialNotationRegex = "(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+,)))(\\d+(,\\d+)?)\\^([+-]*[1-9]\\d*)(?=\\b)";
    const DoubleDecimalPointRegex: (placeholder: string) => string;
    const DoubleWithoutIntegralRegex: (placeholder: string) => string;
    const DoubleWithRoundNumber: string;
    const DoubleAllFloatRegex: string;
    const NumberWithSuffixPercentage: string;
    const TillRegex = "(\\b[a\u00E0]\\b|at[e\u00E9]h?|--|-|\u2014|\u2014\u2014|~|\u2013)";
    const MoreRegex = "(mais\\s+(alt[oa]s?|grandes?)\\s+que|(mais|maior(es)?|superior(es)?|acima)\\b((\\s+(que|de|a))|(?=\\s+ou\\b))|(?<!<|=)>)";
    const LessRegex = "(mais\\s+baix[oa]\\s+que|(meno(s|r(es)?)|inferior(es)?|abaixo)(\\s+(que|de|a)|(?=\\s+ou\\b))|(?<!>|=)<)";
    const EqualRegex = "((igua(l|is)|equivalente(s)?|equivale(ndo)?)(\\s+(ao?|que|d[eao]))?|(?<!<|>)=)";
    const MoreOrEqualPrefix: string;
    const MoreOrEqual: string;
    const MoreOrEqualSuffix = "((\\b(e|ou)\\b\\s+(mais|maior(es)?|superior(es)?)((?!\\s+(alt[oa]|baix[oa]|que|d[eao]|ao?))|(\\s+(que|d[eao]|ao?)(?!(\\s*\\d+)))))|(como(\\s+o)?|no)\\s+m[\u00EDi]nimo|(pelo|ao)\\s+menos)\\b";
    const LessOrEqualPrefix: string;
    const LessOrEqual: string;
    const LessOrEqualSuffix = "((\\b(e|ou)\\b\\s+(meno(s|r(es)?|inferior(es)?))((?!\\s+(alt[oa]|baix[oa]|que|d[eao]|ao?))|(\\s+(que|d[eao]|ao?)(?!(\\s*\\d+)))))|(como(\\s+o)?|no)\\s+m[\u00E1a]ximo)\\b";
    const NumberSplitMark: string;
    const MoreRegexNoNumberSucceed = "(\\b(mais|maior(es)?|superior(es)?)((?!\\s+(que|d[eao]|ao?))|\\s+((que|d[eao])(?!(\\s*\\d+))))|((por\\s+|a)cima)(?!(\\s*\\d+)))\\b";
    const LessRegexNoNumberSucceed = "(\\b(meno(s|r(es)?)|inferior(es)?)((?!\\s+(que|d[eao]|ao?))|\\s+((que|d[eao]|ao?)(?!(\\s*\\d+))))|((por\\s+|a)baixo)(?!(\\s*\\d+)))\\b";
    const EqualRegexNoNumberSucceed = "(\\b(igua(l|is)|equivalentes?|equivale(ndo)?)((?!\\s+(ao?|que|d[eao]))|(\\s+(ao?|que|d[eao])(?!(\\s*\\d+)))))\\b";
    const OneNumberRangeMoreRegex1: string;
    const OneNumberRangeMoreRegex1LB: string;
    const OneNumberRangeMoreRegex2: string;
    const OneNumberRangeMoreSeparateRegex: string;
    const OneNumberRangeLessRegex1: string;
    const OneNumberRangeLessRegex1LB: string;
    const OneNumberRangeLessRegex2: string;
    const OneNumberRangeLessSeparateRegex: string;
    const OneNumberRangeEqualRegex: string;
    const TwoNumberRangeRegex1: string;
    const TwoNumberRangeRegex2: string;
    const TwoNumberRangeRegex3: string;
    const TwoNumberRangeRegex4: string;
    const AmbiguousFractionConnectorsRegex = "(\\b(em|de)\\b)";
    const DecimalSeparatorChar = ",";
    const FractionMarkerToken = "sobre";
    const NonDecimalSeparatorChar = ".";
    const HalfADozenText = "seis";
    const WordSeparatorToken = "e";
    const WrittenDecimalSeparatorTexts: string[];
    const WrittenGroupSeparatorTexts: string[];
    const WrittenIntegerSeparatorTexts: string[];
    const WrittenFractionSeparatorTexts: string[];
    const WrittenFractionSuffix: string[];
    const OneHalfTokens: string[];
    const PluralSuffix = "s";
    const HalfADozenRegex = "meia\\s+d[u\u00FA]zia";
    const DigitalNumberRegex: string;
    const CardinalNumberMap: ReadonlyMap<string, number>;
    const OrdinalNumberMap: ReadonlyMap<string, number>;
    const PrefixCardinalMap: ReadonlyMap<string, number>;
    const SuffixOrdinalMap: ReadonlyMap<string, number>;
    const RoundNumberMap: ReadonlyMap<string, number>;
    const AmbiguityFiltersDict: ReadonlyMap<string, string>;
    const RelativeReferenceOffsetMap: ReadonlyMap<string, string>;
    const RelativeReferenceRelativeToMap: ReadonlyMap<string, string>;
}
