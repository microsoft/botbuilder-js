export declare namespace FrenchNumeric {
    const LangMarker = "Fre";
    const CompoundNumberLanguage = false;
    const MultiDecimalSeparatorCulture = true;
    const RoundNumberIntegerRegex = "(cent|mille|millions?|milliards?|billions?)";
    const ZeroToNineIntegerRegex = "(une?|deux|trois|quatre|cinq|six|sept|huit|neuf|z[\u00E9e]ro)";
    const TwoToNineIntegerRegex = "(deux|trois|quatre|cinq|six|sept|huit|neuf)";
    const TenToNineteenIntegerRegex = "((seize|quinze|quatorze|treize|douze|onze)|dix(\\Wneuf|\\Whuit|\\Wsept)?)";
    const TensNumberIntegerRegex = "(quatre\\Wvingt(s|\\Wdix)?|soixante(\\Wdix)?|vingt|trente|quarante|cinquante|septante|octante|huitante|nonante)";
    const DigitsNumberRegex = "\\d|\\d{1,3}(\\.\\d{3})";
    const NegativeNumberTermsRegex = "^[.]";
    const NegativeNumberSignRegex: string;
    const HundredsNumberIntegerRegex: string;
    const BelowHundredsRegex: string;
    const BelowThousandsRegex: string;
    const SupportThousandsRegex: string;
    const SeparaIntRegex: string;
    const AllIntRegex: string;
    const NumbersWithPlaceHolder: (placeholder: string) => string;
    const NumbersWithSuffix: string;
    const RoundNumberIntegerRegexWithLocks: string;
    const NumbersWithDozenSuffix = "(((?<!\\d+\\s*)-\\s*)|(?<=\\b))\\d+\\s+douzaine(s)?(?=\\b)";
    const AllIntRegexWithLocks: string;
    const AllIntRegexWithDozenSuffixLocks: string;
    const SimpleRoundOrdinalRegex = "(centi|[bm]illioni|milli(ardi)?)[e\u00E8]me";
    const OneToNineOrdinalRegex = "(premi[e\u00E8]re?|second[e]|tier(s|ce)|(deuxi|troisi|quatri|cinqui|sixi|septi|hui[tr]i|neuvi)[e\u00E8]me)";
    const SpecialUnderHundredOrdinalRegex = "(di[xz]i|onzi|douzi|treizi|quatorzi|quinzi|seizi|dix[\\s-](septi|huiri|neuvi))[e\u00E8]me";
    const TensOrdinalRegex = "(quatre-vingt-di[xz]i[e\u00E8]me|quatre-vingti[e\u00E8]me|huitanti[e\u00E8]me|octanti[e\u00E8]me|soixante-dixi[e\u00E8]me|septanti[e\u00E8]me|soixanti[e\u00E8]me|cinquanti[e\u00E8]me|quaranti[e\u00E8]me|trenti[e\u00E8]me|vingti[e\u00E8]me)";
    const HundredOrdinalRegex: string;
    const UnderHundredOrdinalRegex: string;
    const UnderThousandOrdinalRegex: string;
    const OverThousandOrdinalRegex: string;
    const RelativeOrdinalRegex = "(?<relativeOrdinal>prochain[es]?|pr[e\u00E9]c[e\u00E9]dent[es]?|(l[\u2019'])?actuel(le)?(\\s+une?)?|(l[\u2019'])?avant(\\s+|-)derniere?|(ant[e\u00E9])?p[e\u00E9]nulti[e\u00E8]me|derni[e\u00E8]r[es]?|suivant[es]?|courant[es]?|cel(le|ui)\\s+d['\u2019]avant\\s+l[ae]\\s+derni[\u00E8e]re?)";
    const ComplexOrdinalRegex: string;
    const SuffixOrdinalRegex: string;
    const ComplexRoundOrdinalRegex: string;
    const AllOrdinalNumberRegex: string;
    const AllOrdinalRegex: string;
    const PlaceHolderPureNumber = "\\b";
    const PlaceHolderDefault = "\\D|\\b";
    const OrdinalSuffixRegex = "(?<=\\b)((\\d*(11e(me)?|1[e\u00E8]re?|[02-9]e(me)?)))(?=\\b)";
    const OrdinalFrenchRegex: string;
    const FractionNotationWithSpacesRegex = "(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+\\s+\\d+[/]\\d+(?=(\\b[^/]|$))";
    const FractionNotationRegex: string;
    const FractionMultiplierRegex: string;
    const RoundMultiplierWithFraction: string;
    const RoundMultiplierRegex: string;
    const FractionNounRegex: string;
    const FractionNounWithArticleRegex: string;
    const FractionPrepositionRegex: string;
    const AllPointRegex: string;
    const AllFloatRegex: string;
    const DoubleDecimalPointRegex: (placeholder: string) => string;
    const DoubleWithoutIntegralRegex: (placeholder: string) => string;
    const DoubleWithMultiplierRegex: string;
    const DoubleWithRoundNumber: string;
    const DoubleAllFloatRegex: string;
    const DoubleExponentialNotationRegex = "(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+[,\\.])))(\\d+([,\\.]\\d+)?)e([+-]*[1-9]\\d*)(?=\\b)";
    const DoubleCaretExponentialNotationRegex = "(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+[,\\.])))(\\d+([,\\.]\\d+)?)\\^([+-]*[1-9]\\d*)(?=\\b)";
    const NumberWithSuffixPercentage: string;
    const NumberWithPrefixPercentage: string;
    const TillRegex = "((?<!\\b[\u00E8e]ga(l(es)?|ux)\\s+)[\u00E0a]|--|-|\u2014|\u2014\u2014|~|\u2013)";
    const MoreRegex = "(?:(bigger|greater|more|plus(\\s+(haut|grand|\u00E2g\u00E9e?))?|sup[\u00E9e]rieure?s?)(\\s+([\u00E0a]|que))?|d\u00E9passant|(au-dessus|(a\\s+)?plus|d\u00E9passant|au-del\u00E0)\\s+d[e'\u2019]|exceed(ed|ing)?|(?<!<|=)>)";
    const LessRegex = "(?:(less|plus\\s+(bas|petit|jeune)|moins|inf[\u00E9e]rieure?s?)(\\s+([\u00E0a]|d[e'\u2019]|que))?|((en )?dessous)\\s+de|under|(?<!>|=)<)";
    const EqualRegex = "(([\u00E9e]ga(l(es)?|ux)|au\\s+nombre)(\\s+([\u00E0a]|d[e'\u2019]))?|(?<!<|>)=)";
    const MoreOrEqualPrefix: string;
    const MoreOrEqual: string;
    const MoreOrEqualSuffix = "((et|ou)\\s+(((more|greater|higher|plus(\\s+grand)?|sup[\u00E9e]rieure?s?)((?!\\s+([\u00E0a]|que))|(\\s+([\u00E0a]|que)(?!((\\s+ou\\s+[\u00E8e]ga(l(es)?|ux)\\s+[\u00E0a])?\\s*\\d+)))))|((a plus|au-dessus)\\s+d[e'\u2019](?!\\s+than))))";
    const LessOrEqualPrefix: string;
    const LessOrEqual: string;
    const LessOrEqualSuffix = "((et|ou)\\s+(less|lower|plus petit|moins|inf[\u00E9e]rieure?s?)((?!\\s+([\u00E0a]|de|que))|(\\s+([\u00E0a]|d[e'\u2019]|que)(?!(\\s*\\d+)))))";
    const NumberSplitMark: string;
    const MoreRegexNoNumberSucceed = "((bigger|greater|more|plus(\\s+grand)?|sup[\u00E9e]rieure?s?)((?!\\s+([\u00E0a]|que))|\\s+(([\u00E0a]|que)(?!(\\s*\\d+))))|((au-dessus|a plus)\\s+d[e'\u2019])(?!(\\s*\\d+)))";
    const LessRegexNoNumberSucceed = "((less|lower|plus petit|moins|inf[\u00E9e]rieure?s?)((?!\\s+([\u00E0a]|d[e'\u2019]|que))|\\s+(([\u00E0a]|d[e'\u2019]|que)(?!(\\s*\\d+))))|(((en )?dessous)\\s+d[e'\u2019]|under)(?!(\\s*\\d+)))";
    const EqualRegexNoNumberSucceed = "([\u00E8e]ga(l(es)?|ux)((?!\\s+([\u00E0a]))|(\\s+([\u00E0a]|que)(?!(\\s*\\d+)))))";
    const OneNumberRangeMoreRegex1: string;
    const OneNumberRangeMoreRegex1LB: string;
    const OneNumberRangeMoreRegex2: string;
    const OneNumberRangeMoreSeparateRegex: string;
    const OneNumberRangeLessRegex1: string;
    const OneNumberRangeLessRegex1LB: string;
    const OneNumberRangeLessRegex2: string;
    const OneNumberRangeLessSeparateRegex: string;
    const OneNumberRangeEqualRegex: string;
    const TwoNumberRangeRegex1: string;
    const TwoNumberRangeRegex2: string;
    const TwoNumberRangeRegex3: string;
    const TwoNumberRangeRegex4: string;
    const DecimalSeparatorChar = ",";
    const FractionMarkerToken = "sur";
    const NonDecimalSeparatorChar = ".";
    const HalfADozenText = "six";
    const WordSeparatorToken = "et";
    const WrittenDecimalSeparatorTexts: string[];
    const WrittenGroupSeparatorTexts: string[];
    const WrittenIntegerSeparatorTexts: string[];
    const WrittenFractionSeparatorTexts: string[];
    const OneHalfTokens: string[];
    const HalfADozenRegex = "(?<=\\b)demie?\\s+douzaine";
    const DigitalNumberRegex: string;
    const AmbiguousFractionConnectorsRegex = "^[.]";
    const CardinalNumberMap: ReadonlyMap<string, number>;
    const OrdinalNumberMap: ReadonlyMap<string, number>;
    const PrefixCardinalMap: ReadonlyMap<string, number>;
    const SuffixOrdinalMap: ReadonlyMap<string, number>;
    const RoundNumberMap: ReadonlyMap<string, number>;
    const AmbiguityFiltersDict: ReadonlyMap<string, string>;
    const RelativeReferenceOffsetMap: ReadonlyMap<string, string>;
    const RelativeReferenceRelativeToMap: ReadonlyMap<string, string>;
}
