export declare namespace JapaneseNumeric {
    const LangMarker = "Jpn";
    const CompoundNumberLanguage = true;
    const MultiDecimalSeparatorCulture = false;
    const DecimalSeparatorChar = ".";
    const FractionMarkerToken = "";
    const NonDecimalSeparatorChar = ",";
    const HalfADozenText = "";
    const WordSeparatorToken = "";
    const ZeroChar = "\u96F6";
    const PairChar = "\u5BFE";
    const RoundNumberMap: ReadonlyMap<string, number>;
    const RoundNumberMapChar: ReadonlyMap<string, number>;
    const ZeroToNineMap: ReadonlyMap<string, number>;
    const FullToHalfMap: ReadonlyMap<string, string>;
    const UnitMap: ReadonlyMap<string, string>;
    const RoundDirectList: string[];
    const TenChars: string[];
    const RoundNumberIntegerRegex = "(\u5341|\u767E|\u5343|\u4E07(?!\u4E07)|\u5104|\u5146)";
    const RoundNumberIntegerHiraganaRegex = "(\u3058\u3085\u3046|[\u3072\u3074\u3073]\u3083\u304F|[\u305B\u305C]\u3093|\u307E\u3093|[\u3072\u3074\u3073]\u3083\u304F\u307E\u3093|[\u305B\u305C]\u3093\u307E\u3093)";
    const AllMultiplierLookupRegex: string;
    const DigitalNumberRegex: string;
    const ZeroToNineFullHalfRegex = "[\\d]";
    const DigitNumRegex: string;
    const DozenRegex = ".*\u30C0\u30FC\u30B9$";
    const PercentageSymbol = "(\u30D1\\s*\u30FC\\s*\u30BB\\s*\u30F3\\s*\u30C8|[\uFF05%])";
    const PercentageRegex = ".+(?=\u30D1\\s*\u30FC\\s*\u30BB\\s*\u30F3\\s*\u30C8)|.*(?=[\uFF05%])";
    const DoubleAndRoundRegex: string;
    const FracSplitRegex = "[\u306F\u3068]|\u5206\\s*\u306E";
    const ZeroToNineIntegerRegex = "[\u96F6\u3007\u4E00\u4E8C\u4E09\u56DB\u4E94\u516D\u4E03\u516B\u4E5D]";
    const ZeroToNineIntegerHiraganaRegex = "(\u308C\u3044|\u30BC\u30ED|\u30DE\u30EB|\u3044[\u3061\u3063]|\u306B|\u3055\u3093|\u3057|\u3088\u3093|\u3054|\u308D[\u304F\u3063]|\u3057\u3061|\u306A\u306A|\u306F[\u3061\u3063]|\u304D\u3085\u3046|\u304F)";
    const HalfUnitRegex = "\u534A";
    const NegativeNumberTermsRegex = "(\u30DE\\s*\u30A4\\s*\u30CA\\s*\u30B9)";
    const NegativeNumberTermsRegexNum: string;
    const NegativeNumberSignRegex: string;
    const SpeGetNumberRegex: string;
    const PairRegex = ".*[\u5BFE\u81B3\u8DB3]$";
    const AllowListRegex = "(\u3002|\uFF0C|\u3001|\uFF08|\uFF09|\u201D\uFF5C\u56FD|\u9031\u9593|\u6642\u9593|\u6642|\u5339|\u30AD\u30ED|\u30C8\u30F3|\u5E74|\u500B|\u8DB3|\u672C|\u3067|\u306F|\\s|$|\u3064|\u6708|\u306E|\u3068)";
    const NotSingleRegex: string;
    const SingleRegex: string;
    const AllIntRegex: string;
    const NotSingleHiraganaRegex: string;
    const SingleHiriganaRegex: string;
    const AllIntHiriganaRegex: string;
    const PlaceHolderPureNumber = "\\b";
    const PlaceHolderDefault = "\\D|\\b";
    const NumbersSpecialsCharsAggressive: string;
    const NumbersSpecialsCharsWithSuffixAggressive: string;
    const NumbersSpecialsChars: string;
    const NumbersSpecialsCharsWithSuffix: string;
    const DottedNumbersSpecialsChar: string;
    const NumbersWithHalfDozen: string;
    const NumbersWithDozen: string;
    const PointRegexStr = "[\\.\uFF0E\u30FB]";
    const AllFloatRegex: string;
    const NumbersWithAllowListRegex: string;
    const NumbersAggressiveRegex: string;
    const PointRegex: string;
    const DoubleSpecialsCharsAggressive: string;
    const DoubleSpecialsChars: string;
    const DoubleRoundNumberSpecialsChars: string;
    const DoubleSpecialsCharsWithNegatives: string;
    const SimpleDoubleSpecialsChars: string;
    const DoubleWithMultiplierAggressiveRegex: string;
    const DoubleWithMultiplierRegex: string;
    const DoubleWithThousandsRegex: string;
    const DoubleAllFloatRegex: string;
    const DoubleExponentialNotationRegex: string;
    const DoubleExponentialNotationKanjiRegex: string;
    const DoubleScientificNotationRegex: string;
    const OrdinalNumbersRegex: string;
    const OrdinalRegex: string;
    const RelativeOrdinalRegex = "(?<relativeOrdinal>((\u6700\u5F8C)(\u304B\u30891\u3064\u524D\u306E\u3053\u3068|\u304B\u3089(3|2|1)\u756A\u76EE|(\u304B\u30891\u3064\u524D)(\u306E\u3082\u306E)|\u304B\u3089\u4E09\u756A\u76EE|\u304B\u3089\u4E8C\u756A\u76EE|(\u304B\u3089(\u4E00|1)\u3064\u524D)(\u306E\u3082\u306E|\u306E\u3053\u3068)?|(\u304B\u30891\u3064)?(\u524D))?|(\u6B21\u306E\u3082\u306E)(\u524D)?|(\u524D(?=\u306E))(\u306E\u3082\u306E)?|(\u73FE\u5728)(\u306E\u3053\u3068)?|\u6B21|\u4E8C\u4F4D))";
    const AllOrdinalRegex: string;
    const AllFractionNumber: string;
    const FractionNotationSpecialsCharsRegex: string;
    const FractionNotationRegex: string;
    const PercentagePointRegex: string;
    const SimplePercentageRegex: string;
    const NumbersPercentagePointRegex: string;
    const NumbersPercentageWithSeparatorRegex: string;
    const NumbersPercentageWithMultiplierRegex: string;
    const FractionPercentagePointRegex: string;
    const FractionPercentageWithSeparatorRegex: string;
    const FractionPercentageWithMultiplierRegex: string;
    const SimpleNumbersPercentageRegex: string;
    const SimpleNumbersPercentageWithMultiplierRegex: string;
    const SimpleNumbersPercentagePointRegex: string;
    const IntegerPercentageRegex: string;
    const IntegerPercentageWithMultiplierRegex: string;
    const NumbersFractionPercentageRegex: string;
    const SimpleIntegerPercentageRegex: string;
    const NumbersFoldsPercentageRegex: string;
    const FoldsPercentageRegex: string;
    const SimpleFoldsPercentageRegex: string;
    const SpecialsPercentageRegex: string;
    const NumbersSpecialsPercentageRegex: string;
    const SimpleSpecialsPercentageRegex: string;
    const SpecialsFoldsPercentageRegex = "\u534A\\s*\u5206|(?<=\u30C0\u30FC\u30B9)";
    const TillRegex = "(\u304B\u3089|--|-|\u2014|\u2014\u2014|~)";
    const MoreRegex = "(\u5927\u306A\u308A|\u3092\u8D85\u3048\u308B|\u5927\u304D\u3044|\u9AD8\u3044|\u5927\u304D\u304F|(?<!<|=)>)";
    const LessRegex = "(\u5C0F\u306A\u308A|\u5C0F\u3055\u3044|\u4F4E\u3044|(?<!>|=)<)";
    const EqualRegex = "(\u7B49\u3057\u3044|\u30A4\u30B3\u30FC\u30EB|(?<!<|>)=)";
    const MoreOrEqualPrefixRegex = "(\u5C11\u306A\u304F\u3068\u3082)";
    const LessOrEqualPrefixRegex = "(\u591A\u304F\u3066)";
    const MoreOrEqual: string;
    const MoreOrEqualSuffix = "(\u3088\u308A(\u5927\u306A\u308A\u30A4\u30B3\u30FC\u30EB|\u5C0F\u3055\u304F\u306A\u3044))";
    const LessOrEqual: string;
    const LessOrEqualSuffix = "(\u5C0F\u306A\u308A\u30A4\u30B3\u30FC\u30EB|\u5927\u3055\u304F\u306A\u3044)";
    const OneNumberRangeMoreRegex1: string;
    const OneNumberRangeMoreRegex3 = "(?<number1>((?!((,(?!\\d+))|\u3002)).)+)\\s*(\u4EE5\u4E0A|\u6700\u4F4E)(?![\u4E07\u5104]{1,2})";
    const OneNumberRangeMoreRegex4: string;
    const OneNumberRangeMoreRegex5 = "(?<number1>((?!((,(?!\\d+))|\u3002)).)+)\\s*((\u3082\u3057\u304F\u306F\u305D\u308C)(\u4EE5\u4E0A)(?![\u4E07\u5104]{1,2}))";
    const OneNumberRangeMoreSeparateRegex = "^[.]";
    const OneNumberRangeLessSeparateRegex = "^[.]";
    const OneNumberRangeLessRegex1: string;
    const OneNumberRangeLessRegex3 = "(?<number2>(((?!((,(?!\\d+))|\u3002)).)+))\\s*(\u4EE5\u4E0B|\u672A\u6E80)(\u306E\u9593)?(?![\u4E07\u5104]{1,2})";
    const OneNumberRangeLessRegex4: string;
    const OneNumberRangeEqualRegex: string;
    const TwoNumberRangeMoreSuffix: string;
    const TwoNumberRangeRegex1: string;
    const TwoNumberRangeRegex2: string;
    const TwoNumberRangeRegex3: string;
    const TwoNumberRangeRegex4: string;
    const AmbiguousFractionConnectorsRegex = "^[.]";
    const RelativeReferenceOffsetMap: ReadonlyMap<string, string>;
    const RelativeReferenceRelativeToMap: ReadonlyMap<string, string>;
    const AmbiguityFiltersDict: ReadonlyMap<string, string>;
}
