export declare namespace SpanishDateTime {
    const TillRegex = "(?<till>hasta|al|a|--|-|—|——)(\\s+(el|la(s)?))?";
    const AndRegex = "(?<and>y|y\\s*el|--|-|—|——)";
    const DayRegex = "(?<day>01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|1|20|21|22|23|24|25|26|27|28|29|2|30|31|3|4|5|6|7|8|9)(?=\\b|t)";
    const MonthNumRegex = "(?<month>01|02|03|04|05|06|07|08|09|10|11|12|1|2|3|4|5|6|7|8|9)\\b";
    const DescRegex = "(?<desc>pm\\b|am\\b|p\\.m\\.|a\\.m\\.)";
    const AmDescRegex = "(am\\b|a\\.m\\.|a m\\b|a\\. m\\.\\b|a\\.m\\b|a\\. m\\b)";
    const PmDescRegex = "(pm\\b|p\\.m\\.|p\\b|p m\\b|p\\. m\\.\\b|p\\.m\\b|p\\. m\\b)";
    const AmPmDescRegex = "(ampm)";
    const TwoDigitYearRegex: string;
    const FullTextYearRegex = "^[\\*]";
    const YearRegex: string;
    const RelativeMonthRegex = "(?<relmonth>(este|pr[oó]ximo|[uú]ltimo)\\s+mes)\\b";
    const MonthRegex = "(?<month>Abril|Abr|Agosto|Ago|Diciembre|Dic|Febrero|Feb|Enero|Ene|Julio|Jul|Junio|Jun|Marzo|Mar|Mayo|May|Noviembre|Nov|Octubre|Oct|Septiembre|Setiembre|Sept|Set)";
    const MonthSuffixRegex: string;
    const DateUnitRegex = "(?<unit>años|año|meses|mes|semanas|semana|d[ií]a(s)?)\\b";
    const PastRegex = "(?<past>\\b(pasad(a|o)(s)?|[uú]ltim[oa](s)?|anterior(es)?|previo(s)?)\\b)";
    const FutureRegex = "(?<past>\\b(siguiente(s)?|pr[oó]xim[oa](s)?|dentro\\s+de|en)\\b)";
    const SimpleCasesRegex: string;
    const MonthFrontSimpleCasesRegex: string;
    const MonthFrontBetweenRegex: string;
    const DayBetweenRegex: string;
    const OneWordPeriodRegex = "\\b(((pr[oó]xim[oa]?|est[ea]|[uú]ltim[oa]?|en)\\s+)?(?<month>Abril|Abr|Agosto|Ago|Diciembre|Dic|Enero|Ene|Febrero|Feb|Julio|Jul|Junio|Jun|Marzo|Mar|Mayo|May|Noviembre|Nov|Octubre|Oct|Septiembre|Setiembre|Sept|Set)|(?<=\\b(del|de la|el|la)\\s+)?(pr[oó]xim[oa](s)?|[uú]ltim[oa]?|est(e|a))\\s+(fin de semana|semana|mes|año)|fin de semana|(mes|años)? a la fecha)\\b";
    const MonthWithYearRegex: string;
    const MonthNumWithYearRegex: string;
    const WeekOfMonthRegex: string;
    const WeekOfYearRegex: string;
    const FollowedDateUnit: string;
    const NumberCombinedWithDateUnit: string;
    const QuarterRegex: string;
    const QuarterRegexYearFront: string;
    const AllHalfYearRegex = "^[.]";
    const PrefixDayRegex = "^[.]";
    const CenturySuffixRegex = "^[.]";
    const SeasonRegex: string;
    const WhichWeekRegex = "(semana)(\\s*)(?<number>\\d\\d|\\d|0\\d)";
    const WeekOfRegex = "(semana)(\\s*)((do|da|de))";
    const MonthOfRegex = "(mes)(\\s*)((do|da|de))";
    const RangeUnitRegex = "\\b(?<unit>años|año|meses|mes|semanas|semana)\\b";
    const InConnectorRegex = "\\b(in)\\b";
    const WithinNextPrefixRegex = "^[.]";
    const FromRegex = "((desde|de)(\\s*la(s)?)?)$";
    const ConnectorAndRegex = "(y\\s*(la(s)?)?)$";
    const BetweenRegex = "(entre\\s*(la(s)?)?)";
    const WeekDayRegex = "\\b(?<weekday>Domingos?|Lunes|Martes|Mi[eé]rcoles|Jueves|Viernes|S[aá]bados?|Lu|Ma|Mi|Ju|Vi|Sa|Do)\\b";
    const OnRegex: string;
    const RelaxedOnRegex = "(?<=\\b(en|el|del)\\s+)((?<day>10|11|12|13|14|15|16|17|18|19|1st|20|21|22|23|24|25|26|27|28|29|2|30|31|3|4|5|6|7|8|9)s?)\\b";
    const ThisRegex: string;
    const LastDateRegex: string;
    const NextDateRegex: string;
    const SpecialDayRegex = "\\b((el\\s+)?(d[ií]a\\s+antes\\s+de\\s+ayer|anteayer)|((el\\s+)?d[ií]a\\s+(despu[eé]s\\s+)?de\\s+mañana|pasado\\s+mañana)|(el\\s)?d[ií]a siguiente|(el\\s)?pr[oó]ximo\\s+d[ií]a|(el\\s+)?[uú]ltimo d[ií]a|(d)?el d[ií]a|ayer|mañana|hoy)\\b";
    const SpecialDayWithNumRegex = "^[.]";
    const ForTheRegex = "^[.]";
    const WeekDayAndDayOfMonthRegex = "^[.]";
    const WeekDayOfMonthRegex: string;
    const RelativeWeekDayRegex = "^[.]";
    const NumberEndingPattern = "^[.]";
    const SpecialDateRegex: string;
    const OfMonthRegex: string;
    const MonthEndRegex: string;
    const WeekDayEnd: string;
    const DateYearRegex: string;
    const DateExtractor1: string;
    const DateExtractor2: string;
    const DateExtractor3: string;
    const DateExtractor4: string;
    const DateExtractor5: string;
    const DateExtractor6: string;
    const DateExtractor7: string;
    const DateExtractor8: string;
    const DateExtractor9: string;
    const DateExtractor10: string;
    const HourNumRegex = "\\b(?<hournum>cero|una|dos|tres|cuatro|cinco|seis|siete|ocho|nueve|diez|once|doce)\\b";
    const MinuteNumRegex = "(?<minnum>un|dos|tres|cuatro|cinco|seis|siete|ocho|nueve|diez|once|doce|trece|catorce|quince|dieciseis|diecisiete|dieciocho|diecinueve|veinte|treinta|cuarenta|cincuenta)";
    const DeltaMinuteNumRegex = "(?<deltaminnum>un|dos|tres|cuatro|cinco|seis|siete|ocho|nueve|diez|once|doce|trece|catorce|quince|dieciseis|diecisiete|dieciocho|diecinueve|veinte|treinta|cuarenta|cincuenta)";
    const OclockRegex = "(?<oclock>en\\s+punto)";
    const PmRegex = "(?<pm>((por|de|a|en)\\s+la)\\s+(tarde|noche))";
    const AmRegex = "(?<am>((por|de|a|en)\\s+la)\\s+(mañana|madrugada))";
    const AmTimeRegex = "(?<am>(esta|(por|de|a|en)\\s+la)\\s+(mañana|madrugada))";
    const PmTimeRegex = "(?<pm>(esta|(por|de|a|en)\\s+la)\\s+(tarde|noche))";
    const LessThanOneHour: string;
    const TensTimeRegex = "(?<tens>diez|veint(i|e)|treinta|cuarenta|cincuenta)";
    const WrittenTimeRegex: string;
    const TimePrefix: string;
    const TimeSuffix: string;
    const BasicTime: string;
    const AtRegex: string;
    const ConnectNumRegex: string;
    const TimeRegex1: string;
    const TimeRegex2: string;
    const TimeRegex3: string;
    const TimeRegex4: string;
    const TimeRegex5: string;
    const TimeRegex6: string;
    const TimeRegex7: string;
    const TimeRegex8: string;
    const TimeRegex9: string;
    const TimeRegex10 = "(a\\s+la|al)\\s+(madrugada|mañana|medio\\s*d[ií]a|tarde|noche)";
    const TimeRegex11: string;
    const TimeRegex12: string;
    const PrepositionRegex = "(?<prep>(a(l)?|en|de(l)?)?(\\s*(la(s)?|el|los))?$)";
    const NowRegex = "\\b(?<now>(justo\\s+)?ahora(\\s+mismo)?|en\\s+este\\s+momento|tan\\s+pronto\\s+como\\s+sea\\s+posible|tan\\s+pronto\\s+como\\s+(pueda|puedas|podamos|puedan)|lo\\s+m[aá]s\\s+pronto\\s+posible|recientemente|previamente)\\b";
    const SuffixRegex = "^\\s*(((y|a|en|por)\\s+la|al)\\s+)?(mañana|madrugada|medio\\s*d[ií]a|tarde|noche)\\b";
    const TimeOfDayRegex = "\\b(?<timeOfDay>mañana|madrugada|(pasado\\s+(el\\s+)?)?medio\\s?d[ií]a|tarde|noche|anoche)\\b";
    const SpecificTimeOfDayRegex: string;
    const TimeOfTodayAfterRegex: string;
    const TimeOfTodayBeforeRegex: string;
    const SimpleTimeOfTodayAfterRegex: string;
    const SimpleTimeOfTodayBeforeRegex: string;
    const TheEndOfRegex = "((a|e)l\\s+)?fin(alizar|al)?(\\s+(el|de(l)?)(\\s+d[ií]a)?(\\s+de)?)?\\s*$";
    const UnitRegex = "(?<unit>años|año|meses|mes|semanas|semana|d[ií]as|d[ií]a|horas|hora|h|hr|hrs|hs|minutos|minuto|mins|min|segundos|segundo|segs|seg)\\b";
    const ConnectorRegex = "^(,|t|para la|para las|cerca de la|cerca de las)$";
    const TimeHourNumRegex = "(?<hour>veintiuno|veintidos|veintitres|veinticuatro|cero|uno|dos|tres|cuatro|cinco|seis|siete|ocho|nueve|diez|once|doce|trece|catorce|quince|diecis([eé])is|diecisiete|dieciocho|diecinueve|veinte)";
    const PureNumFromTo: string;
    const PureNumBetweenAnd: string;
    const SpecificTimeFromTo = "^[.]";
    const SpecificTimeBetweenAnd = "^[.]";
    const TimeUnitRegex = "(?<unit>horas|hora|h|minutos|minuto|mins|min|segundos|segundo|secs|sec)\\b";
    const TimeFollowedUnit: string;
    const TimeNumberCombinedWithUnit: string;
    const DateTimePeriodNumberCombinedWithUnit: string;
    const PeriodTimeOfDayWithDateRegex = "\\b(((y|a|en|por)\\s+la|al)\\s+)?(?<timeOfDay>mañana|madrugada|(pasado\\s+(el\\s+)?)?medio\\s?d[ií]a|tarde|noche|anoche)\\b";
    const RelativeTimeUnitRegex: string;
    const LessThanRegex = "^[.]";
    const MoreThanRegex = "^[.]";
    const SuffixAndRegex = "(?<suffix>\\s*(y)\\s+((un|uno|una)\\s+)?(?<suffix_num>media|cuarto))";
    const FollowedUnit: string;
    const DurationNumberCombinedWithUnit: string;
    const AnUnitRegex: string;
    const DuringRegex = "^[.]";
    const AllRegex = "\\b(?<all>tod[oa]?\\s+(el|la)\\s+(?<unit>año|mes|semana|d[ií]a))\\b";
    const HalfRegex = "\\b(?<half>medi[oa]\\s+(?<unit>ano|mes|semana|d[íi]a|hora))\\b";
    const ConjunctionRegex = "^[.]";
    const InexactNumberRegex = "\\b(pocos|poco|algo|varios)\\b";
    const InexactNumberUnitRegex: string;
    const HolidayRegex1: string;
    const HolidayRegex2: string;
    const HolidayRegex3: string;
    const BeforeRegex = "(antes(\\s+del?(\\s+las?)?)?)";
    const AfterRegex = "(despues(\\s*del?(\\s+las?)?)?)";
    const SinceRegex = "(desde(\\s+(las?|el))?)";
    const AroundRegex = "^[.]";
    const PeriodicRegex = "\\b(?<periodic>a\\s*diario|diariamente|mensualmente|semanalmente|quincenalmente|anualmente)\\b";
    const EachExpression = "cada|tod[oa]s\\s*(l[oa]s)?";
    const EachUnitRegex: string;
    const EachPrefixRegex: string;
    const EachDayRegex: string;
    const BeforeEachDayRegex: string;
    const SetEachRegex: string;
    const LaterEarlyPeriodRegex = "^[.]";
    const WeekWithWeekDayRangeRegex = "^[.]";
    const GeneralEndingRegex = "^[.]";
    const MiddlePauseRegex = "^[.]";
    const PrefixArticleRegex = "^[\\.]";
    const OrRegex = "^[.]";
    const YearPlusNumberRegex = "^[.]";
    const NumberAsTimeRegex = "^[.]";
    const TimeBeforeAfterRegex = "^[.]";
    const DateNumberConnectorRegex = "^[.]";
    const CenturyRegex = "^[.]";
    const DecadeRegex = "^[.]";
    const DecadeWithCenturyRegex = "^[.]";
    const RelativeDecadeRegex = "^[.]";
    const ComplexDatePeriodRegex = "^[.]";
    const YearSuffix: string;
    const AgoRegex = "\\b(antes)\\b";
    const LaterRegex = "\\b(despu[eé]s|desde ahora)\\b";
    const Tomorrow = "mañana";
    const UnitMap: ReadonlyMap<string, string>;
    const UnitValueMap: ReadonlyMap<string, number>;
    const SeasonMap: ReadonlyMap<string, string>;
    const SeasonValueMap: ReadonlyMap<string, number>;
    const CardinalMap: ReadonlyMap<string, number>;
    const DayOfWeek: ReadonlyMap<string, number>;
    const MonthOfYear: ReadonlyMap<string, number>;
    const Numbers: ReadonlyMap<string, number>;
    const HolidayNames: ReadonlyMap<string, string[]>;
    const VariableHolidaysTimexDictionary: ReadonlyMap<string, string>;
    const DoubleNumbers: ReadonlyMap<string, number>;
    const DateTokenPrefix = "en ";
    const TimeTokenPrefix = "a las ";
    const TokenBeforeDate = "el ";
    const TokenBeforeTime = "la ";
    const NextPrefixRegex = "(pr[oó]xim[oa]|siguiente)\\b";
    const PastPrefixRegex = "([uú]ltim[oa])\\b";
    const ThisPrefixRegex = "(est[ea])\\b";
    const RelativeDayRegex = "^[\\.]";
    const RestOfDateRegex = "^[\\.]";
    const RelativeDurationUnitRegex = "^[\\.]";
    const ReferenceDatePeriodRegex = "^[.]";
    const FromToRegex = "\\b(from).+(to)\\b.+";
    const SingleAmbiguousMonthRegex = "^(the\\s+)?(may|march)$";
    const UnspecificDatePeriodRegex = "^[.]";
    const PrepositionSuffixRegex = "\\b(on|in|at|around|for|during|since|from|to)$";
    const RestOfDateTimeRegex = "^[\\.]";
    const SetWeekDayRegex = "^[\\.]";
    const NightRegex = "\\b(medionoche|noche)\\b";
    const CommonDatePrefixRegex = "^[\\.]";
    const DurationUnitRegex = "^[\\.]";
    const DurationConnectorRegex = "^[.]";
    const YearAfterRegex = "^[.]";
    const YearPeriodRegex = "^[.]";
    const FutureSuffixRegex = "^[.]";
    const WrittenDecades: ReadonlyMap<string, number>;
    const SpecialDecadeCases: ReadonlyMap<string, number>;
    const DefaultLanguageFallback = "DMY";
    const DurationDateRestrictions: any[];
}
