export declare namespace FrenchDateTime {
    const TillRegex = "(?<till>au|[aà]|et|jusqu'[aà]|avant|--|-|—|——)";
    const RangeConnectorRegex = "(?<and>et|de la|au|[aà]|et\\s*la|--|-|—|——)";
    const RelativeRegex = "(?<order>prochain|prochaine|de|du|ce|cette|l[ae]|derni[eè]re|pr[eé]c[eé]dente|au\\s+cours+(de|du\\s*))";
    const NextSuffixRegex = "(?<order>prochain|prochaine|prochaines|suivante)\\b";
    const PastSuffixRegex = "(?<order>dernier|derni[eè]re|pr[eé]c[eé]dente)\\b";
    const ThisPrefixRegex = "(?<order>ce|cette|au\\s+cours+(du|de))\\b";
    const DayRegex = "(?<day>01|02|03|04|05|06|07|08|09|10|11|11e|12|12e|13|13e|14|14e|15|15e|16|16e|17|17e|18|18e|19|19e|1er|1|21|21e|20|20e|22|22e|23|23e|24|24e|25|25e|26|26e|27|27e|28|28e|29|29e|2|2e|30|30e|31|31e|3|3e|4|4e|5|5e|6|6e|7|7e|8|8e|9|9e)(?=\\b|t)";
    const MonthNumRegex = "(?<month>01|02|03|04|05|06|07|08|09|10|11|12|1|2|3|4|5|6|7|8|9)\\b";
    const DescRegex = "(?<desc>h|ampm|am\\b|a\\.m\\.|a m\\b|a\\. m\\.|a\\.m\\b|a\\. m\\b|pm\\b|p\\.m\\.|p m\\b|p\\. m\\.|p\\.m\\b|p\\. m\\b|p\\b\\b)";
    const AmDescRegex = "(h|am\\b|a\\.m\\.|a m\\b|a\\. m\\.|a\\.m\\b|a\\. m\\b)";
    const PmDescRegex = "(h|pm\\b|p\\.m\\.|p\\b|p m\\b|p\\. m\\.|p\\.m\\b|p\\. m\\b)";
    const AmPmDescRegex = "(h|ampm)";
    const TwoDigitYearRegex: string;
    const FullTextYearRegex = "^[\\*]";
    const YearRegex: string;
    const WeekDayRegex = "(?<weekday>Dimanche|Lundi|Mardi|Mercredi|Jeudi|Vendredi|Samedi|Lun|Mar|Mer|Jeu|Ven|Sam|Dim)\\b";
    const RelativeMonthRegex: string;
    const WrittenMonthRegex = "(?<month>Avril|Avr\\.|Avr|Août|D[eé]cembre|D[eé]c|D[eé]c\\.|F[eé]vrier|F[eé]v|F[eé]vr\\.|F[eé]vr|Javier|Jan|Janv\\.|Janv|Juillet|Jul|Juil|Juil\\.|Juin|Jun|Mars|Mar|Mai|Novembre|Nov|Nov\\.|Octobre|Oct|Oct\\.|Septembre|Sep|Sept|Sept\\.)";
    const MonthSuffixRegex: string;
    const DateUnitRegex = "(?<unit>l'ann[eé]e|ann[eé]es|an|mois|semaines|semaine|jours|jour|journ[eé]e|journ[eé]es)\\b";
    const SimpleCasesRegex: string;
    const MonthFrontSimpleCasesRegex: string;
    const MonthFrontBetweenRegex: string;
    const BetweenRegex: string;
    const YearWordRegex = "\\b(?<year>l'ann[ée]e)\\b";
    const MonthWithYear: string;
    const OneWordPeriodRegex: string;
    const MonthNumWithYear: string;
    const WeekOfMonthRegex: string;
    const WeekOfYearRegex: string;
    const FollowedDateUnit: string;
    const NumberCombinedWithDateUnit: string;
    const QuarterRegex: string;
    const QuarterRegexYearFront: string;
    const AllHalfYearRegex = "^[.]";
    const PrefixDayRegex = "^[.]";
    const CenturySuffixRegex = "^[.]";
    const SeasonRegex: string;
    const WhichWeekRegex = "(semaine)(\\s*)(?<number>\\d\\d|\\d|0\\d)";
    const WeekOfRegex = "(semaine)(\\s*)(de)";
    const MonthOfRegex = "(mois)(\\s*)(de)";
    const MonthRegex = "(?<month>Avril|Avr|Avr\\.|Août|Aout|D[ée]cembre|D[eé]c|Dec\\.|F[eé]vrier|F[eé]vr|Fev|F[eé]v|F[eé]v\\.|Janvier|Janv\\.|Janv|Jan|Jan\\.|Juillet|Juil|Juil\\.|Juin|Mars|Mai|Novembre|Nov|Nov\\.|Octobre|Oct|Oct\\.|Septembre|Sep|Sept|Sept\\.)";
    const OnRegex: string;
    const RelaxedOnRegex = "(?<=\\b(en|le|dans|sur\\s*l[ea]|du|sur)\\s+)((?<day>10e|11e|12e|13e|14e|15e|16e|17e|18e|19e|1er|20e|21e|22e|23e|24e|25e|26e|27e|28e|29e|2e|30e|31e|3e|4e|5e|6e|7e|8e|9e)s?)\\b";
    const ThisRegex: string;
    const LastDateRegex: string;
    const NextDateRegex: string;
    const SpecialDayRegex = "\\b(avant[\\s|-]hier|apr[eè]s(-demain|\\s*demain)|(le\\s)?jour suivant|(le\\s+)?dernier jour|hier|lendemain|demain|de la journ[ée]e|aujourd'hui)\\b";
    const SpecialDayWithNumRegex = "^[.]";
    const StrictWeekDay = "\\b(?<weekday>Dimanche|Lundi|Mardi|Mercredi|Jeudi|Vendredi|Samedi|Lun|Mar|Mer|Jeu|Ven|Sam|Dim)s?\\b";
    const SetWeekDayRegex = "\\b(?<prefix>le\\s+)?(?<weekday>matin|matin[ée]e|apres-midi|soir[ée]e|soir|Dimanche|Lundi|Mardi|Mercredi|Jeudi|Vendredi|Samedi)s\\b";
    const WeekDayOfMonthRegex: string;
    const RelativeWeekDayRegex = "^[.]";
    const NumberEndingPattern = "^[.]";
    const SpecialDate: string;
    const DateYearRegex: string;
    const DateExtractor1: string;
    const DateExtractor2: string;
    const DateExtractor3: string;
    const DateExtractor4: string;
    const DateExtractor5: string;
    const DateExtractor6: string;
    const DateExtractor7: string;
    const DateExtractor8: string;
    const DateExtractor9: string;
    const DateExtractorA: string;
    const OfMonth: string;
    const MonthEnd: string;
    const WeekDayEnd: string;
    const RangeUnitRegex = "\\b(?<unit>l'année|ann[eé]e(s)?|mois|semaines|semaine)\\b";
    const HourNumRegex = "\\b(?<hournum>zero|un|deux|trois|quatre|cinq|six|sept|huit|neuf|dix|onze|douze|treize|quatorze|quinze|dix-six|dix-sept|dix-huit|dix-neuf|vingt|vingt-et-un|vingt-deux|vingt-trois)\\b";
    const MinuteNumRegex = "(?<minnum>un|deux|trois|quatre|cinq|six|sept|huit|neuf|dix|onze|douze|treize|quatorze|quinze|seize|dix-sept|dix-huit|dix-neuf|vingt|trente|quarante|cinquante)";
    const DeltaMinuteNumRegex = "(?<deltaminnum>un|deux|trois|quatre|cinq|six|sept|huit|neuf|dix|onze|douze|treize|quatorze|quinze|seize|dix-sept|dix-huit|dix-neuf|vingt|trente|quarante|cinquante)";
    const OclockRegex = "(?<oclock>heure|heures|h)";
    const PmRegex = "(?<pm>(dans l'\\s*)?apr[eè]s(\\s*|-)midi|(du|ce|de|le)\\s*(soir[ée]e|soir)|(dans l[ea]\\s+)?(nuit|soir[eé]e))";
    const AmRegex = "(?<am>(du|de|ce|(du|de|dans)\\s*l[ea]|le)?\\s*matin[ée]e|(du|de|ce|dans l[ea]|le)?\\s*matin)";
    const LessThanOneHour: string;
    const WrittenTimeRegex: string;
    const TimePrefix: string;
    const TimeSuffix: string;
    const BasicTime: string;
    const MidnightRegex = "(?<midnight>minuit)";
    const CommonDatePrefixRegex = "^[\\.]";
    const MorningRegex = "(?<morning>matin[ée]e|matin)";
    const AfternoonRegex = "(?<afternoon>(d'|l')?apr[eè]s(-|\\s*)midi)";
    const MidmorningRegex: string;
    const MiddayRegex = "(?<midday>milieu(\\s*|-)d[eu]\\s*(jour|midi)|apr[eè]s(-|\\s*)midi)";
    const MidafternoonRegex: string;
    const MidTimeRegex: string;
    const AtRegex: string;
    const IshRegex: string;
    const TimeUnitRegex = "(?<unit>heures|heure|hrs|hr|h|minutes|minute|mins|min|secondes|seconde|secs|sec)\\b";
    const RestrictedTimeUnitRegex = "(?<unit>huere|minute)\\b";
    const ConnectNumRegex: string;
    const FivesRegex = "(?<tens>(quinze|vingt(\\s*|-*(cinq))?|trente(\\s*|-*(cinq))?|quarante(\\s*|-*(cinq))??|cinquante(\\s*|-*(cinq))?|dix|cinq))\\b";
    const PeriodHourNumRegex = "(?<hour>vingt-et-un|vingt-deux|vingt-trois|vingt-quatre|zero|une|deux|trois|quatre|cinq|six|sept|huit|neuf|dix|onze|douze|treize|quatorze|quinze|seize|dix-sept|dix-huit|dix-neuf|vingt)";
    const TimeRegex1: string;
    const TimeRegex2: string;
    const TimeRegex3: string;
    const TimeRegex4: string;
    const TimeRegex5: string;
    const TimeRegex6: string;
    const TimeRegex7: string;
    const TimeRegex8: string;
    const TimeRegex9: string;
    const TimeRegex10: string;
    const HourRegex: string;
    const PeriodDescRegex = "(?<desc>pm|am|p\\.m\\.|a\\.m\\.|p)";
    const PeriodPmRegex = "(?<pm>dans l'apr[eè]s-midi|ce soir|d[eu] soir|dans l[ea] soir[eé]e|dans la nuit|d[eu] soir[ée]e)s?";
    const PeriodAmRegex = "(?<am>matin|d[eu] matin|matin[ée]e)s?";
    const PureNumFromTo: string;
    const PureNumBetweenAnd: string;
    const SpecificTimeFromTo = "^[.]";
    const SpecificTimeBetweenAnd = "^[.]";
    const PrepositionRegex = "(?<prep>^([aà] la|en|sur\\s*l[ea]|sur|de)$)";
    const TimeOfDayRegex = "\\b(?<timeOfDay>((((dans\\s+(l[ea])?\\s+)?((?<early>d[eé]but(\\s+|-)|t[oô]t(\\s+|-)(l[ea]\\s*)?)|(?<late>fin\\s*|fin de(\\s+(la)?)|tard\\s*))?(matin[ée]e|matin|((d|l)?'?)apr[eè]s[-|\\s*]midi|nuit|soir[eé]e|soir)))|(((\\s+(l[ea])?\\s+)?)(jour|journ[eé]e)))s?)\\b";
    const SpecificTimeOfDayRegex: string;
    const TimeFollowedUnit: string;
    const TimeNumberCombinedWithUnit: string;
    const NowRegex = "\\b(?<now>(ce\\s+)?moment|maintenant|d[eè]s que possible|dqp|r[eé]cemment|auparavant)\\b";
    const SuffixRegex = "^\\s*(dans\\s+l[ea]\\s+)|(en\\s+)|(du)?(matin|matin([eé]e)?|apr[eè]s-midi|soir[eé]e|nuit)\\b";
    const DateTimeTimeOfDayRegex = "\\b(?<timeOfDay>matin[ée]e|matin|apr[eè]s-midi|nuit|soir)\\b";
    const DateTimeSpecificTimeOfDayRegex: string;
    const TimeOfTodayAfterRegex: string;
    const TimeOfTodayBeforeRegex: string;
    const SimpleTimeOfTodayAfterRegex: string;
    const SimpleTimeOfTodayBeforeRegex: string;
    const TheEndOfRegex = "(la\\s+)?fin(\\s+de\\s*|\\s*de*l[ea])?\\s*$";
    const PeriodTimeOfDayRegex = "\\b((dans\\s+(le)?\\s+)?((?<early>d[eé]but(\\s+|-|d[ue]|de la)|t[oô]t)|(?<late>tard\\s*|fin(\\s+|-|d[eu])?))?(?<timeOfDay>matin|((d|l)?'?)apr[eè]s-midi|nuit|soir[eé]e|soir))\\b";
    const PeriodSpecificTimeOfDayRegex: string;
    const PeriodTimeOfDayWithDateRegex: string;
    const LessThanRegex = "^[.]";
    const MoreThanRegex = "^[.]";
    const DurationUnitRegex = "(?<unit>ans|ann[eé]e|mois|semaines|semaine|jour|jours|heures|heure|hrs|hr|h|minutes|minute|mins|min|secondes|seconde|secs|sec|ann[eé]es|journ[eé]e)\\b";
    const SuffixAndRegex = "(?<suffix>\\s*(et)\\s+((un|une)\\s+)?(?<suffix_num>demi|quart))";
    const PeriodicRegex = "\\b(?<periodic>quotidienne|quotidien|journellement|mensuel|mensuelle|jour|jours|hebdomadaire|bihebdomadaire|annuellement|annuel)\\b";
    const EachUnitRegex: string;
    const EachPrefixRegex = "\\b(?<each>(chaque|tous les|(toutes les))\\s*$)";
    const SetEachRegex = "\\b(?<each>(chaque|tous les|(toutes les))\\s*)";
    const SetLastRegex = "(?<last>prochain|dernier|derni[eè]re|pass[ée]s|pr[eé]c[eé]dent|courant|en\\s*cours)";
    const EachDayRegex = "^\\s*(chaque|tous les)\\s*(jour|jours)\\b";
    const DurationFollowedUnit: string;
    const NumberCombinedWithDurationUnit: string;
    const AnUnitRegex: string;
    const DuringRegex = "^[.]";
    const AllRegex = "\\b(?<all>toute\\s(l['ea])\\s?(?<unit>ann[eé]e|mois|semaine|semaines|jour|jours|journ[eé]e))\\b";
    const HalfRegex = "(((un|une)\\s*)|\\b)(?<half>demi?(\\s*|-)+(?<unit>ann[eé]e|ans|mois|semaine|jour|heure))\\b";
    const ConjunctionRegex = "\\b((et(\\s+de|pour)?)|avec)\\b";
    const HolidayRegex1: string;
    const HolidayRegex2: string;
    const HolidayRegex3: string;
    const HolidayRegex4: string;
    const DateTokenPrefix = "le ";
    const TimeTokenPrefix = "à ";
    const TokenBeforeDate = "le ";
    const TokenBeforeTime = "à ";
    const AMTimeRegex = "(?<am>matin[ée]e|matin)";
    const PMTimeRegex = "\\b(?<pm>(d'|l')?apr[eè]s-midi|soir|nuit|\\s*ce soir|du soir)\\b";
    const BeforeRegex = "\\b(avant)\\b";
    const BeforeRegex2 = "\\b(entre\\s*(le|la(s)?)?)\\b";
    const AfterRegex = "\\b(apres)\\b";
    const SinceRegex = "\\b(depuis)\\b";
    const AroundRegex = "^[.]";
    const AgoPrefixRegex = "\\b(y a)\\b";
    const LaterRegex = "\\b(plus tard)\\b";
    const AgoRegex = "^[.]";
    const InConnectorRegex = "\\b(dans|en|sur)\\b";
    const WithinNextPrefixRegex = "^[.]";
    const MorningStartEndRegex = "(^(matin))|((matin)$)";
    const AfternoonStartEndRegex = "(^((d'|l')?apr[eè]s-midi))|(((d'|l')?apr[eè]s-midi)$)";
    const EveningStartEndRegex = "(^(soir[ée]e|soir))|((soir[ée]e|soir)$)";
    const NightStartEndRegex = "(^(nuit))|((nuit)$)";
    const InexactNumberRegex = "\\b(quelque|quel qu[ée]s|quelqu[ée]s|plusieur|plusieurs|divers)\\b";
    const InexactNumberUnitRegex: string;
    const RelativeTimeUnitRegex: string;
    const RelativeDurationUnitRegex: string;
    const ReferenceDatePeriodRegex = "^[.]";
    const ConnectorRegex = "^(,|pour|t|vers)$";
    const ConnectorAndRegex = "\\b(et\\s*(le|la(s)?)?)\\b.+";
    const FromRegex = "((de|du)?)$";
    const FromRegex2 = "((depuis|de)(\\s*la(s)?)?)$";
    const FromToRegex = "\\b(du|de|des|depuis).+(à|a|au)\\b.+";
    const SingleAmbiguousMonthRegex = "^(le\\s+)?(may|march)$";
    const UnspecificDatePeriodRegex = "^[.]";
    const PrepositionSuffixRegex = "\\b(du|de|[àa]|vers|dans)$";
    const FlexibleDayRegex = "(?<DayOfMonth>([A-Za-z]+\\s)?[A-Za-z\\d]+)";
    const ForTheRegex: string;
    const WeekDayAndDayOfMonthRegex: string;
    const RestOfDateRegex = "\\b(Reste|fin)\\s+(d[eu]\\s+)?((le|cette|ce)\\s+)?(?<duration>semaine|mois|l'ann[ée]e)\\b";
    const RestOfDateTimeRegex = "\\b(Reste|fin)\\s+(d[eu]\\s+)?((le|cette|ce)\\s+)?(?<unit>jour)\\b";
    const LaterEarlyPeriodRegex = "^[.]";
    const WeekWithWeekDayRangeRegex = "^[.]";
    const GeneralEndingRegex = "^[.]";
    const MiddlePauseRegex = "^[.]";
    const DurationConnectorRegex = "^[.]";
    const PrefixArticleRegex = "^[\\.]";
    const OrRegex = "^[.]";
    const YearPlusNumberRegex = "^[.]";
    const NumberAsTimeRegex = "^[.]";
    const TimeBeforeAfterRegex = "^[.]";
    const DateNumberConnectorRegex = "^[.]";
    const CenturyRegex = "^[.]";
    const DecadeRegex = "^[.]";
    const DecadeWithCenturyRegex = "^[.]";
    const RelativeDecadeRegex = "^[.]";
    const YearSuffix: string;
    const YearAfterRegex = "^[.]";
    const YearPeriodRegex = "^[.]";
    const FutureSuffixRegex = "^[.]";
    const ComplexDatePeriodRegex = "^[.]";
    const UnitMap: ReadonlyMap<string, string>;
    const UnitValueMap: ReadonlyMap<string, number>;
    const SeasonMap: ReadonlyMap<string, string>;
    const SeasonValueMap: ReadonlyMap<string, number>;
    const CardinalMap: ReadonlyMap<string, number>;
    const DayOfWeek: ReadonlyMap<string, number>;
    const MonthOfYear: ReadonlyMap<string, number>;
    const Numbers: ReadonlyMap<string, number>;
    const DayOfMonth: ReadonlyMap<string, number>;
    const DoubleNumbers: ReadonlyMap<string, number>;
    const HolidayNames: ReadonlyMap<string, string[]>;
    const NightRegex = "\\b(minuit|nuit)\\b";
    const WrittenDecades: ReadonlyMap<string, number>;
    const SpecialDecadeCases: ReadonlyMap<string, number>;
    const DefaultLanguageFallback = "DMY";
    const DurationDateRestrictions: any[];
}
