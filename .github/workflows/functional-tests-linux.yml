# Variable 'authAppId' was defined in the Variables tab
# Variable 'authAppPassword' was defined in the Variables tab
# Variable 'DeleteResourceGroup' was defined in the Variables tab
# Variable 'runCodesignValidationInjection' was defined in the Variables tab
# Variable 'version' was defined in the Variables tab
# Variable Group 'AzureDeploymentCredsVariableGroup' was defined in the Variables tab
# Variable Group 'JsLinuxTestBotVariableGroup' was defined in the Variables tab

# https://docs.github.com/en/actions/learn-github-actions/migrating-from-azure-pipelines-to-github-actions

name: functional-tests-linux.yml

on:
  schedule:
  - cron: '30 2 * * *'

jobs:
  job_1:
    runs-on: windows-latest

# https://github.com/Azure/actions-workflow-samples/blob/master/assets/create-secrets-for-GitHub-workflows.md#set-secret-with-azure-credentials
    steps:
    - uses: Azure/login@v1
      with:
        creds: ${{ secrets.BF_SDK_KEYVAULTS_RG_CREDENTIALS }} 

# https://github.com/marketplace/actions/azure-key-vault-get-secrets
    - uses: Azure/get-keyvault-secrets@v1
      with:
        keyvault: "SdkJsKeyVault"
        secrets: 'LinuxTestBotAppId,LinuxTestBotAppSecret,LinuxTestBotBotGroup,LinuxTestBotBotName'  # comma separated list of secret keys that need to be fetched from the Key Vault 
      id: getTestBotSecrets

    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_TESTS_CREDENTIALS }}

    - name: Delete test resource group if it exists
      run: |
        #az webapp list --query "[?state=='Running']";
        echo off;
        echo call az group exists --name "$(LinuxTestBotBotGroup)";
        call az group exists --name "$(LinuxTestBotBotGroup)" | findstr /C:"true" > nul;
        set err=%errorlevel%;
        if "%err%"=="0" echo $(LinuxTestBotBotGroup) found.;
        if "%err%"=="0" echo "##vso[task.logissue type=warning;]Did the build fail last time? $(LinuxTestBotBotGroup) was not deleted. Deleting it.";
        if "%err%"=="0" call az group delete -n "$(LinuxTestBotBotGroup)" --yes;
        if "%err%"=="1" echo $(LinuxTestBotBotGroup) does not exist. OK to create it.;

    - name: Blah balh
      shell: powershell
      run: |
        Write-Host "Hi there";

# https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/deploy-github-actions
# https://github.com/Azure/arm-deploy/blob/main/README.md
# Good example: https://githubmemory.com/repo/Azure/arm-deploy/issues

    - name: Create test resource group $(LinuxTestBotBotGroup)
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ secrets.AZURE_RG }}
        template: ./azuredeploy.json
        parameters: ./Bicep/bicep.parameters.json storageAccountType=Standard_LRS accountPrefix=${{ github.event.inputs.accountPrefix }} ghesversion=${{ github.event.inputs.ghes_version }}

#  - task: AzureResourceGroupDeployment@2
#    displayName: Create test resource group $(LinuxTestBotBotGroup)
#    inputs:
#      ConnectedServiceName: 0ab0d343-57b9-4390-9a6a-13d71ef36de6
#      resourceGroupName: $(LinuxTestBotBotGroup)
#      location: West US
#      csmFile: testing/functional/functionaltestbot/template/linux/template.json
#      overrideParameters: -botName $(LinuxTestBotBotName) -sku {"name":"S1","tier":"Standard","size":"S1","family":"S","capacity":1} -linuxFxVersion "NODE|10.14" -location "West US" -appId $(LinuxTestBotAppId) -appSecret $(LinuxTestBotAppSecret)

#  - task: AzureCLI@1
#    displayName: Generate web.config for bot deploy
#    inputs:
#      connectedServiceNameARM: 0ab0d343-57b9-4390-9a6a-13d71ef36de6
#      scriptLocation: inlineScript
#      inlineScript: call az bot prepare-deploy --code-dir "$(System.DefaultWorkingDirectory)\testing\functional\functionaltestbot" --lang Javascript

#  - task: CmdLine@2
#    displayName: Deploy the bot to Azure
#    inputs:
#      script: >-
#        Move $(System.DefaultWorkingDirectory)\testing\functional\functionaltestbot\deployment-scripts\linux\* $(System.DefaultWorkingDirectory)\testing\functional\functionaltestbot


#        git config --global user.name "BotBuilderDotNetPipeline"

#        git config --global user.email BotBuilderDotNet@Pipeline.com

#        git init


#        git add .

#        git commit -m "Add bot source code"

#        git remote add azure https://$(AzureDeploymentUser):$(AzureDeploymentPassword)@$(LinuxTestBotBotName).scm.azurewebsites.net:443/$(LinuxTestBotBotName).git


#        git push azure master
#      workingDirectory: testing/functional/functionaltestbot
#  - task: AzureCLI@1
#    displayName: Create directline channel
#    inputs:
#      connectedServiceNameARM: 0ab0d343-57b9-4390-9a6a-13d71ef36de6
#      scriptLocation: inlineScript
#      inlineScript: call az bot directline create --name "$(LinuxTestBotBotName)" --resource-group "$(LinuxTestBotBotGroup)" > "$(System.DefaultWorkingDirectory)\testing\functional\functionaltestbot\DirectLineCreate.json"
#  - task: PowerShell@2
#    displayName: Get bot connection key
#    inputs:
#      targetType: inline
#      script: >
#        $json = Get-Content '$(System.DefaultWorkingDirectory)\testing\functional\functionaltestbot\DirectLineCreate.json' | Out-String | ConvertFrom-Json


#        $key = $json.properties.properties.sites.key


#        echo "##vso[task.setvariable variable=DIRECT_LINE_KEY;]$key"


#        Write-Host "setx DIRECT_LINE_KEY $key";
#  - task: NodeTool@0
#    displayName: Use Node 10.x
#    inputs:
#      versionSpec: 10.x
#  - task: CmdLine@2
#    displayName: yarn --frozen-lockfile
#    inputs:
#      script: yarn --frozen-lockfile
#  - task: CmdLine@2
#    displayName: yarn functional-test
#    inputs:
#      script: yarn functional-test
#  - task: AzureCLI@1
#    displayName: Delete test resource group
#    condition: and(succeededOrFailed(), ne(variables['DeleteResourceGroup'], 'false'))
#    inputs:
#      connectedServiceNameARM: 0ab0d343-57b9-4390-9a6a-13d71ef36de6
#      scriptLocation: inlineScript
#      inlineScript: call az group delete -n "$(LinuxTestBotBotGroup)" --yes
#  - task: CmdLine@2
#    displayName: Dir workspace
#    inputs:
#      script: >
#        pushd ..

#        dir /s
#...
